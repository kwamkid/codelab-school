// lib/services/line-settings.ts

import { 
  doc, 
  getDoc, 
  setDoc,
  serverTimestamp
} from 'firebase/firestore';
import { db } from '@/lib/firebase/client';

// Types
export interface LineSettings {
  // LINE Login Channel
  loginChannelId?: string;
  loginChannelSecret?: string;
  
  // LINE Messaging API
  messagingChannelId?: string;
  messagingChannelSecret?: string;
  messagingChannelAccessToken?: string;
  
  // LIFF Settings
  liffId?: string;
  liffChannelId?: string;
  
  // Webhook
  webhookUrl?: string;
  webhookVerified: boolean;
  
  // Rich Menu
  richMenuId?: string;
  richMenuEnabled: boolean;
  
  // Quick Reply Templates
  quickReplyTemplates?: {
    scheduleInquiry?: string;
    makeupRequest?: string;
    trialBooking?: string;
    contactUs?: string;
  };
  
  // Auto Reply Messages
  autoReplyMessages?: {
    welcome?: string;
    unknownCommand?: string;
    outsideHours?: string;
  };
  
  // Notification Templates
  notificationTemplates?: {
    classReminder?: string;
    makeupConfirmation?: string;
    paymentReminder?: string;
    trialConfirmation?: string;
  };
  
  // Settings
  enableAutoReply: boolean;
  enableNotifications: boolean;
  businessHours: {
    start: string; // "09:00"
    end: string;   // "18:00"
    days: number[]; // [1,2,3,4,5] = Mon-Fri
  };
  
  // Metadata
  updatedAt?: Date;
  updatedBy?: string;
}

// Rich Menu Template
export interface RichMenuTemplate {
  id: string;
  name: string;
  description: string;
  areas: {
    bounds: { x: number; y: number; width: number; height: number };
    action: {
      type: 'uri' | 'message' | 'postback';
      label: string;
      data?: string;
      uri?: string;
      text?: string;
    };
  }[];
}

const SETTINGS_DOC_ID = 'line';
const SETTINGS_COLLECTION = 'settings';

// Get LINE settings
export async function getLineSettings(): Promise<LineSettings> {
  try {
    const docRef = doc(db, SETTINGS_COLLECTION, SETTINGS_DOC_ID);
    const docSnap = await getDoc(docRef);
    
    if (docSnap.exists()) {
      const data = docSnap.data();
      return {
        ...data,
        updatedAt: data.updatedAt?.toDate() || new Date()
      } as LineSettings;
    }
    
    // Return default settings if not exists
    return getDefaultLineSettings();
  } catch (error) {
    console.error('Error getting LINE settings:', error);
    return getDefaultLineSettings();
  }
}

// Update LINE settings
export async function updateLineSettings(
  settings: Partial<LineSettings>,
  userId: string
): Promise<void> {
  try {
    const docRef = doc(db, SETTINGS_COLLECTION, SETTINGS_DOC_ID);
    
    await setDoc(docRef, {
      ...settings,
      updatedAt: serverTimestamp(),
      updatedBy: userId
    }, { merge: true });
    
  } catch (error) {
    console.error('Error updating LINE settings:', error);
    throw error;
  }
}

// Get default settings
export function getDefaultLineSettings(): LineSettings {
  return {
    webhookVerified: false,
    richMenuEnabled: false,
    enableAutoReply: true,
    enableNotifications: true,
    businessHours: {
      start: '09:00',
      end: '18:00',
      days: [1, 2, 3, 4, 5] // Mon-Fri
    },
    quickReplyTemplates: {
      scheduleInquiry: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
      makeupRequest: '‡∏Ç‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ä‡∏î‡πÄ‡∏ä‡∏¢',
      trialBooking: '‡∏à‡∏≠‡∏á‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
      contactUs: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°'
    },
    autoReplyMessages: {
      welcome: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ üôè ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà {schoolName}\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏∞',
      unknownCommand: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ {contactPhone}',
      outsideHours: '‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ ({businessHours})\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏ù‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏∞'
    },
    notificationTemplates: {
      classReminder: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ô‡πâ‡∏≠‡∏á{studentName} ‡∏°‡∏µ‡∏Ñ‡∏•‡∏≤‡∏™ {subjectName} ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ\nüìÖ {date}\n‚è∞ {time}\nüìç {location}\n\n‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä',
      makeupConfirmation: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ä‡∏î‡πÄ‡∏ä‡∏¢\n\n‡∏ô‡πâ‡∏≠‡∏á{studentName}\n‡∏ß‡∏¥‡∏ä‡∏≤: {subjectName}\nüìÖ {date}\n‚è∞ {time}\nüë©‚Äçüè´ ‡∏Ñ‡∏£‡∏π{teacherName}\nüìç {location}',
      paymentReminder: '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\n‡∏Ñ‡∏≠‡∏£‡πå‡∏™: {courseName}\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {amount} ‡∏ö‡∏≤‡∏ó\n‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞: {dueDate}\n\n‡∏ä‡∏≥‡∏£‡∏∞‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: {paymentInfo}',
      trialConfirmation: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\n‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!\n‡∏ô‡πâ‡∏≠‡∏á{studentName}\n‡∏ß‡∏¥‡∏ä‡∏≤: {subjectName}\nüìÖ {date}\n‚è∞ {time}\nüìç {location}\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ {contactPhone}'
    }
  };
}

// Validate LINE settings
export function validateLineSettings(settings: Partial<LineSettings>): {
  isValid: boolean;
  errors: Record<string, string>;
} {
  const errors: Record<string, string> = {};
  
  // Validate Channel IDs (numeric only)
  if (settings.loginChannelId && !/^\d+$/.test(settings.loginChannelId)) {
    errors.loginChannelId = 'Channel ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô';
  }
  
  if (settings.messagingChannelId && !/^\d+$/.test(settings.messagingChannelId)) {
    errors.messagingChannelId = 'Channel ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô';
  }
  
  // Validate Channel Secret (32 characters)
  if (settings.loginChannelSecret && settings.loginChannelSecret.length !== 32) {
    errors.loginChannelSecret = 'Channel Secret ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£';
  }
  
  if (settings.messagingChannelSecret && settings.messagingChannelSecret.length !== 32) {
    errors.messagingChannelSecret = 'Channel Secret ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£';
  }
  
  // Validate Access Token format
  if (settings.messagingChannelAccessToken && settings.messagingChannelAccessToken.length < 100) {
    errors.messagingChannelAccessToken = 'Access Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
  }
  
  // Validate LIFF ID format
  if (settings.liffId && !/^\d{10}-\w{8}$/.test(settings.liffId)) {
    errors.liffId = 'LIFF ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: 1234567890-abcdefgh)';
  }
  
  // Validate Webhook URL
  if (settings.webhookUrl && !settings.webhookUrl.startsWith('https://')) {
    errors.webhookUrl = 'Webhook URL ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ https://';
  }
  
  // Validate business hours
  if (settings.businessHours) {
    const startTime = settings.businessHours.start.split(':');
    const endTime = settings.businessHours.end.split(':');
    
    if (startTime.length !== 2 || endTime.length !== 2) {
      errors.businessHours = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    } else {
      const startHour = parseInt(startTime[0]);
      const endHour = parseInt(endTime[0]);
      
      if (startHour >= endHour) {
        errors.businessHours = '‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏¥‡∏î';
      }
    }
  }
  
  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
}

// Get Rich Menu templates
export function getRichMenuTemplates(): RichMenuTemplate[] {
  return [
    {
      id: 'default',
      name: '‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å',
      description: 'Rich Menu ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á',
      areas: [
        {
          bounds: { x: 0, y: 0, width: 833, height: 843 },
          action: {
            type: 'uri',
            label: '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
            uri: 'https://liff.line.me/{liffId}/schedule'
          }
        },
        {
          bounds: { x: 833, y: 0, width: 834, height: 843 },
          action: {
            type: 'uri',
            label: '‡∏à‡∏≠‡∏á‡∏ó‡∏î‡∏•‡∏≠‡∏á',
            uri: 'https://liff.line.me/{liffId}/trial'
          }
        },
        {
          bounds: { x: 1667, y: 0, width: 833, height: 843 },
          action: {
            type: 'uri',
            label: '‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
            uri: 'https://liff.line.me/{liffId}/payment'
          }
        },
        {
          bounds: { x: 0, y: 843, width: 833, height: 843 },
          action: {
            type: 'uri',
            label: '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå',
            uri: 'https://liff.line.me/{liffId}/profile'
          }
        },
        {
          bounds: { x: 833, y: 843, width: 834, height: 843 },
          action: {
            type: 'uri',
            label: 'Makeup Class',
            uri: 'https://liff.line.me/{liffId}/makeup'
          }
        },
        {
          bounds: { x: 1667, y: 843, width: 833, height: 843 },
          action: {
            type: 'message',
            label: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤',
            text: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°'
          }
        }
      ]
    }
  ];
}

// Test LINE Channel (Client-side version without SDK)
export async function testLineChannel(
  channelId: string,
  channelSecret: string,
  accessToken?: string
): Promise<{
  success: boolean;
  message: string;
  error?: string;
}> {
  try {
    if (!channelId || !channelSecret) {
      return {
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Channel ID ‡πÅ‡∏•‡∏∞ Channel Secret'
      };
    }
    
    if (!/^\d+$/.test(channelId)) {
      return {
        success: false,
        message: 'Channel ID ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô'
      };
    }
    
    if (channelSecret.length !== 32) {
      return {
        success: false,
        message: 'Channel Secret ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ 32 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£'
      };
    }
    
    // For Messaging API test
    if (accessToken) {
      // Call API route to test on server-side
      const response = await fetch('/api/line/test-connection', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          type: 'messaging',
          accessToken
        })
      });
      
      const result = await response.json();
      return result;
    }
    
    // For LINE Login test
    const response = await fetch('/api/line/test-connection', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        type: 'login',
        channelId,
        channelSecret
      })
    });
    
    const result = await response.json();
    return result;
    
  } catch (error) {
    console.error('Error testing LINE channel:', error);
    return {
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

// Generate Webhook URL
export function generateWebhookUrl(baseUrl: string): string {
  if (!baseUrl) return '';
  
  // Remove trailing slash
  const cleanUrl = baseUrl.replace(/\/$/, '');
  
  // Add webhook endpoint
  return `${cleanUrl}/api/webhooks/line`;
}

// Format business hours display
export function formatBusinessHours(settings: LineSettings): string {
  const days = ['‡∏≠‡∏≤', '‡∏à', '‡∏≠', '‡∏û', '‡∏û‡∏§', '‡∏®', '‡∏™'];
  const activeDays = settings.businessHours.days
    .sort((a, b) => a - b)
    .map(d => days[d])
    .join(', ');
  
  return `${activeDays} ${settings.businessHours.start}-${settings.businessHours.end} ‡∏ô.`;
}