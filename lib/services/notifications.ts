// lib/services/notifications.ts

import { 
  collection, 
  doc, 
  addDoc, 
  updateDoc,
  query,
  where,
  orderBy,
  getDocs,
  serverTimestamp,
  Timestamp
} from 'firebase/firestore';
import { db } from '@/lib/firebase/client';

// สร้าง in-app notification
export async function createNotification(data: {
  userId: string;
  type: 'reminder' | 'announcement' | 'schedule_change' | 'payment' | 'makeup';
  title: string;
  body: string;
  imageUrl?: string;
  actionUrl?: string;
  data?: any;
}): Promise<string> {
  try {
    const docRef = await addDoc(
      collection(db, 'notifications', data.userId, 'messages'), 
      {
        ...data,
        sentAt: serverTimestamp(),
        isRead: false
      }
    );
    return docRef.id;
  } catch (error) {
    console.error('Error creating notification:', error);
    throw error;
  }
}

// แจ้งเตือน Admin เมื่อมี auto-generated makeup
export async function notifyAdminNewMakeup(
  studentName: string,
  className: string,
  missedSessions: number,
  branchId?: string // เพิ่ม parameter
): Promise<void> {
  try {
    if (branchId) {
      // ส่งเฉพาะ admin ในสาขานั้น
      await notifyAdminsInBranch(branchId, {
        type: 'makeup',
        title: 'มี Makeup Class อัตโนมัติใหม่',
        body: `นักเรียน ${studentName} ในคลาส ${className} มีการขาดเรียน ${missedSessions} ครั้ง (สร้างอัตโนมัติจากการสมัครหลังคลาสเริ่ม)`,
        actionUrl: '/makeup',
        data: {
          studentName,
          className,
          missedSessions,
          autoGenerated: true,
          branchId
        }
      });
    } else {
      // ส่งให้ทุกคน (เหมือนเดิม)
      await createNotification({
        userId: 'admin',
        type: 'makeup',
        title: 'มี Makeup Class อัตโนมัติใหม่',
        body: `นักเรียน ${studentName} ในคลาส ${className} มีการขาดเรียน ${missedSessions} ครั้ง (สร้างอัตโนมัติจากการสมัครหลังคลาสเริ่ม)`,
        actionUrl: '/makeup',
        data: {
          studentName,
          className,
          missedSessions,
          autoGenerated: true
        }
      });
    }
    
    console.log(`[Notification] Created auto-generated makeup notification for ${studentName}`);
  } catch (error) {
    console.error('Error sending notification:', error);
  }
}

export async function notifyAdminsInBranch(
  branchId: string,
  notification: {
    type: 'reminder' | 'announcement' | 'schedule_change' | 'payment' | 'makeup';
    title: string;
    body: string;
    imageUrl?: string;
    actionUrl?: string;
    data?: any;
  }
): Promise<void> {
  try {
    // Get all admins for this branch
    const { getAdminUsers } = await import('./admin-users');
    const admins = await getAdminUsers(branchId);
    
    // Create notification for each admin
    const promises = admins.map(admin => 
      createNotification({
        userId: admin.uid,
        ...notification
      })
    );
    
    await Promise.all(promises);
    
    console.log(`[Notification] Sent to ${admins.length} admins in branch ${branchId}`);
  } catch (error) {
    console.error('Error sending branch notifications:', error);
  }
}

// ดึง notifications ที่ยังไม่ได้อ่าน
export async function getUnreadNotifications(userId: string): Promise<any[]> {
  try {
    const q = query(
      collection(db, 'notifications', userId, 'messages'),
      where('isRead', '==', false),
      orderBy('sentAt', 'desc')
    );
    
    const querySnapshot = await getDocs(q);
    return querySnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      sentAt: doc.data().sentAt?.toDate() || new Date()
    }));
  } catch (error) {
    console.error('Error getting unread notifications:', error);
    return [];
  }
}

// Mark notification as read
export async function markNotificationAsRead(
  userId: string, 
  notificationId: string
): Promise<void> {
  try {
    const docRef = doc(db, 'notifications', userId, 'messages', notificationId);
    await updateDoc(docRef, {
      isRead: true,
      readAt: serverTimestamp()
    });
  } catch (error) {
    console.error('Error marking notification as read:', error);
  }
}