// lib/services/line-notifications.ts

import { doc, getDoc, collection, query, where, getDocs, Timestamp } from 'firebase/firestore';
import { db } from '@/lib/firebase/client';
import { formatDate, formatTime, getDayName } from '@/lib/utils';

// ‡∏î‡∏∂‡∏á LINE settings
async function getLineSettings() {
  const docRef = doc(db, 'settings', 'line');
  const docSnap = await getDoc(docRef);
  return docSnap.exists() ? docSnap.data() : null;
}

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô LINE API
export async function sendLineMessage(
  userId: string,
  message: string,
  accessToken?: string
): Promise<{ success: boolean; error?: string }> {
  try {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á token ‡∏°‡∏≤ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å settings
    if (!accessToken) {
      const settings = await getLineSettings();
      accessToken = settings?.messagingChannelAccessToken;
    }
    
    if (!accessToken) {
      return { success: false, error: '‡πÑ‡∏°‡πà‡∏û‡∏ö Channel Access Token' };
    }
    
    const response = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || ''}/api/line/send-message-v2`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ 
        userId, 
        message,
        accessToken 
      })
    });
    
    const result = await response.json();
    return result;
  } catch (error) {
    console.error('Error sending LINE message:', error);
    return { success: false, error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' };
  }
}

// 1. ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏Ñ‡∏•‡∏≤‡∏™‡∏õ‡∏Å‡∏ï‡∏¥)
export async function sendClassReminder(
  studentId: string,
  classId: string,
  scheduleDate: Date
): Promise<boolean> {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const studentDoc = await getDoc(doc(db, 'students', studentId));
    if (!studentDoc.exists()) return false;
    const student = studentDoc.data();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
    const parentDoc = await getDoc(doc(db, 'parents', student.parentId));
    if (!parentDoc.exists() || !parentDoc.data().lineUserId) return false;
    const parent = parentDoc.data();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏™
    const classDoc = await getDoc(doc(db, 'classes', classId));
    if (!classDoc.exists()) return false;
    const classData = classDoc.data();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤
    const subjectDoc = await getDoc(doc(db, 'subjects', classData.subjectId));
    const subject = subjectDoc.exists() ? subjectDoc.data() : null;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏π
    const teacherDoc = await getDoc(doc(db, 'teachers', classData.teacherId));
    const teacher = teacherDoc.exists() ? teacherDoc.data() : null;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤
    const branchDoc = await getDoc(doc(db, 'branches', classData.branchId));
    const branch = branchDoc.exists() ? branchDoc.data() : null;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á
    const roomDoc = await getDoc(doc(db, 'branches', classData.branchId, 'rooms', classData.roomId));
    const room = roomDoc.exists() ? roomDoc.data() : null;
    
    // ‡∏î‡∏∂‡∏á template
    const settings = await getLineSettings();
    let template = settings?.notificationTemplates?.classReminder || 
      '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ô‡πâ‡∏≠‡∏á{studentName} ‡∏°‡∏µ‡∏Ñ‡∏•‡∏≤‡∏™ {subjectName} ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ\nüìÖ {date}\n‚è∞ {time}\nüìç {location}\n\n‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä';
    
    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    const message = template
      .replace('{studentName}', student.nickname || student.name)
      .replace('{subjectName}', subject?.name || classData.name)
      .replace('{date}', formatDate(scheduleDate, 'full'))
      .replace('{time}', `${formatTime(classData.startTime)} - ${formatTime(classData.endTime)}`)
      .replace('{location}', `${branch?.name || ''} ${room?.name ? '‡∏´‡πâ‡∏≠‡∏á ' + room.name : ''}`);
    
    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const result = await sendLineMessage(parent.lineUserId, message);
    
    if (result.success) {
      console.log(`Sent class reminder for student ${studentId} class ${classId}`);
    }
    
    return result.success;
  } catch (error) {
    console.error('Error sending class reminder:', error);
    return false;
  }
}

// 2. ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Makeup Class
export async function sendMakeupNotification(
  makeupId: string,
  type: 'scheduled' | 'reminder'
): Promise<boolean> {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• makeup
    const makeupDoc = await getDoc(doc(db, 'makeupClasses', makeupId));
    if (!makeupDoc.exists()) return false;
    const makeup = makeupDoc.data();
    
    if (!makeup.makeupSchedule) return false;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    const studentDoc = await getDoc(doc(db, 'students', makeup.studentId));
    if (!studentDoc.exists()) return false;
    const student = studentDoc.data();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á
    const parentDoc = await getDoc(doc(db, 'parents', student.parentId));
    if (!parentDoc.exists() || !parentDoc.data().lineUserId) return false;
    const parent = parentDoc.data();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏î‡∏¥‡∏°
    const classDoc = await getDoc(doc(db, 'classes', makeup.originalClassId));
    const classData = classDoc.exists() ? classDoc.data() : null;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤
    const subjectDoc = classData ? await getDoc(doc(db, 'subjects', classData.subjectId)) : null;
    const subject = subjectDoc?.exists() ? subjectDoc.data() : null;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏π
    const teacherDoc = await getDoc(doc(db, 'teachers', makeup.makeupSchedule.teacherId));
    const teacher = teacherDoc.exists() ? teacherDoc.data() : null;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á
    const branchDoc = await getDoc(doc(db, 'branches', makeup.makeupSchedule.branchId));
    const branch = branchDoc.exists() ? branchDoc.data() : null;
    
    const roomDoc = await getDoc(doc(db, 'branches', makeup.makeupSchedule.branchId, 'rooms', makeup.makeupSchedule.roomId));
    const room = roomDoc.exists() ? roomDoc.data() : null;
    
    // ‡∏î‡∏∂‡∏á template
    const settings = await getLineSettings();
    let template = settings?.notificationTemplates?.makeupConfirmation || 
      '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ä‡∏î‡πÄ‡∏ä‡∏¢\n\n‡∏ô‡πâ‡∏≠‡∏á{studentName}\n‡∏ß‡∏¥‡∏ä‡∏≤: {subjectName}\nüìÖ {date}\n‚è∞ {time}\nüë©‚Äçüè´ ‡∏Ñ‡∏£‡∏π{teacherName}\nüìç {location}';
    
    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
    let message = template
      .replace('{studentName}', student.nickname || student.name)
      .replace('{subjectName}', subject?.name || classData?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
      .replace('{date}', formatDate(makeup.makeupSchedule.date.toDate(), 'full'))
      .replace('{time}', `${formatTime(makeup.makeupSchedule.startTime)} - ${formatTime(makeup.makeupSchedule.endTime)}`)
      .replace('{teacherName}', teacher?.nickname || teacher?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
      .replace('{location}', `${branch?.name || ''} ${room?.name ? '‡∏´‡πâ‡∏≠‡∏á ' + room.name : ''}`);
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô reminder (‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô 1 ‡∏ß‡∏±‡∏ô)
    if (type === 'reminder') {
      message = `‚è∞ [‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Makeup Class ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ]\n\n${message}`;
    } else {
      // type: 'scheduled' (‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏±‡∏î‡∏ß‡∏±‡∏ô)
      message = `‚úÖ [‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î Makeup Class]\n\n${message}\n\n‡∏´‡∏≤‡∏Å‡∏ï‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà`;
    }
    
    const result = await sendLineMessage(parent.lineUserId, message);
    
    if (result.success) {
      console.log(`Sent makeup ${type} for makeup ${makeupId}`);
    }
    
    return result.success;
  } catch (error) {
    console.error('Error sending makeup notification:', error);
    return false;
  }
}

// 3. ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
export async function sendTrialConfirmation(
  trialSessionId: string
): Promise<boolean> {
  try {
    const trialDoc = await getDoc(doc(db, 'trialSessions', trialSessionId));
    if (!trialDoc.exists()) return false;
    const trial = trialDoc.data();
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• booking
    const bookingDoc = await getDoc(doc(db, 'trialBookings', trial.bookingId));
    if (!bookingDoc.exists()) return false;
    const booking = bookingDoc.data();
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ LINE ID ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    if (!booking.parentLineId) return false;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤
    const subjectDoc = await getDoc(doc(db, 'subjects', trial.subjectId));
    const subject = subjectDoc.exists() ? subjectDoc.data() : null;
    
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤
    const branchDoc = await getDoc(doc(db, 'branches', trial.branchId));
    const branch = branchDoc.exists() ? branchDoc.data() : null;
    
    // ‡∏î‡∏∂‡∏á template  
    const settings = await getLineSettings();
    let template = settings?.notificationTemplates?.trialConfirmation || 
      '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô\n\n‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!\n‡∏ô‡πâ‡∏≠‡∏á{studentName}\n‡∏ß‡∏¥‡∏ä‡∏≤: {subjectName}\nüìÖ {date}\n‚è∞ {time}\nüìç {location}\n\n‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ {contactPhone}';
    
    const message = template
      .replace('{studentName}', trial.studentName)
      .replace('{subjectName}', subject?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
      .replace('{date}', formatDate(trial.scheduledDate.toDate(), 'full'))
      .replace('{time}', `${formatTime(trial.startTime)} - ${formatTime(trial.endTime)}`)
      .replace('{location}', branch?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')
      .replace('{contactPhone}', branch?.phone || '081-234-5678');
    
    const result = await sendLineMessage(booking.parentLineId, message);
    return result.success;
  } catch (error) {
    console.error('Error sending trial confirmation:', error);
    return false;
  }
}